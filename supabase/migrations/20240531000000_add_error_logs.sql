-- Create error_logs table for tracking application errors
CREATE TABLE IF NOT EXISTS public.error_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  error_type TEXT NOT NULL,
  error_details JSONB NOT NULL,
  user_email TEXT,
  resolved BOOLEAN NOT NULL DEFAULT false,
  resolved_at TIMESTAMPTZ,
  notes TEXT
);

-- Add comment to table
COMMENT ON TABLE public.error_logs IS 'Table for tracking application errors including email failures';

-- Set up RLS policies for the error_logs table
ALTER TABLE public.error_logs ENABLE ROW LEVEL SECURITY;

-- Create policy to allow authenticated users to insert their own errors
CREATE POLICY "Users can insert their own errors" 
ON public.error_logs FOR INSERT 
TO authenticated, anon
WITH CHECK (true);

-- Create policy to allow only super admins to select all error logs
CREATE POLICY "Only super admins can view all error logs" 
ON public.error_logs FOR SELECT 
TO authenticated
USING (auth.jwt() ->> 'email' IN (SELECT email FROM admin_users WHERE role = 'super_admin'));

-- Create policy to allow only super admins to update error logs
CREATE POLICY "Only super admins can update error logs" 
ON public.error_logs FOR UPDATE 
TO authenticated
USING (auth.jwt() ->> 'email' IN (SELECT email FROM admin_users WHERE role = 'super_admin'))
WITH CHECK (auth.jwt() ->> 'email' IN (SELECT email FROM admin_users WHERE role = 'super_admin'));

-- Create index on error_type for faster filtering
CREATE INDEX error_logs_error_type_idx ON public.error_logs (error_type);

-- Create index on created_at for chronological queries
CREATE INDEX error_logs_created_at_idx ON public.error_logs (created_at DESC); 